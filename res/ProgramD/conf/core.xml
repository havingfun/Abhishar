<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<!--
Program D Core Configuration
===============================================================
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 
02111-1307, USA.

An XML valid copy of
http://java.sun.com/dtd/properties.dtd
is at
../resources/DTD/java-properties.dtd

-->

<!--
GENERAL NOTES

1. Configuration options are grouped for easy maintenance.
2. Unless otherwise noted, commenting out a property will
   cause the engine's default value to be used.
3. Relative URLs will be (attempted to be) resolved from
   the parent of this file (i.e., if this file is at
   file:/ProgramD/conf/core.xml, they will be resolved
   from file:/ProgramD/conf).
4. A property may only be defined once.
5. The notations in [square brackets] are used to generate
   the Settings class that corresponds with this properties
   file.  Please do not change these notations unless you
   know what you are doing.
-->

<properties version="1.0">
    <!--[generate: org.aitools.programd.CoreSettings]
        [strip-prefix: programd.]-->
        
    <!--
    MAIN PROGRAM D CONFIGURATION
    -->
    
    <!--The namespace URI of AIML to use. [URI: http://alicebot.org/2001/AIML-1.0.1]-->
    <entry key="programd.aiml-schema.namespace-uri">http://alicebot.org/2001/AIML-1.0.1</entry>
    
    <!--The bot configuration startup file. [URL: bots.xml]-->
    <entry key="programd.startup-file-path">bots.xml</entry>
    <!--<entry key="programd.startup-file-path">../resources/testing/multibot/bots.xml</entry>-->
    
    <!--What to do when a category is loaded whose pattern:that:topic path
        is identical to one already loaded (for the same bot).
        * skip: Leave the currently loaded template in place and ignore the new one.
        * overwrite: Overwrite the loaded template with the new one.
        * append: Append the content of the new template to the currently loaded one.
        * combine: Store the new template as well, so it will have an equal chance
                   of being used as the currently loaded one.
                                 [enum(skip, overwrite, append, combine): combine]-->
    <entry key="programd.merge.policy">combine</entry>
    
    <!--If the append merge policy is used, what text content (if any)
        should be inserted between the contents of the two templates?
        * (The default value you see here is the hex code for a space.)  [String: &#x10;]-->
    <entry key="programd.merge.append.separator-string"> </entry>
    
    <!--Produce a note in the console/log for each merge? [boolean: true]-->
    <entry key="programd.merge.note-each">false</entry>
    
    <!--The default value for undefined predicates. [String: undefined]-->
    <entry key="programd.predicate-empty-default">undefined</entry>
    
    <!--The maximum allowable time (in milliseconds) to get a response. [int: 1000]-->
    <entry key="programd.response-timeout">1000</entry>
    
    <!-- How many categories will be loaded before a message is displayed? [int: 5000]
         * Only meaningful if programd.enable-console == true.-->
    <entry key="programd.category-load-notify-interval">5000</entry>
    
    <!-- Whether or not to print a message as each file is loaded. [boolean: true]-->
    <entry key="programd.load.notify-each-file">true</entry>
    
    <!--The input to match if an infinite loop is found. [String: INFINITE LOOP]-->
    <entry key="programd.infinite-loop-input">INFINITE LOOP</entry>
    
    <!-- Which bot predicate contains the client's name? [String: name]-->
    <entry key="programd.client-name-predicate">name</entry>
    
    <!-- Which bot predicate contains the bot's name? [String: name]-->
    <entry key="programd.bot-name-predicate">name</entry>
    
    <!-- Print stack trace on uncaught exceptions? [boolean: false]-->
    <entry key="programd.on-uncaught-exceptions.print-stack-trace">true</entry>
    
    <!--Execute contents of <system> elements? [boolean: false]-->
    <entry key="programd.os-access-allowed">true</entry>
    
    <!--Execute contents of <javascript> elements? [boolean: false]-->
    <entry key="programd.javascript-allowed">true</entry>
    
    <!--Where to write gossip entries.                       [URL: /var/log/programd/gossip.txt]
        * Gossip entries will be written like this:
          <li>the gossip</li>.-->
    <entry key="programd.gossip.path">/var/log/programd/gossip.txt</entry>
    
    <!--The string to send when first connecting to the bot. [String: CONNECT]
         * If this value is empty or not defined, no value
           will be sent.-->
    <entry key="programd.connect-string">CONNECT</entry>
    
    <!--The string to send after an inactivity timeout. [String: INACTIVITY]-->
    <entry key="programd.inactivity-string">INACTIVITY</entry>
    
    <!--The Nodemapper implementation to use. [String: org.aitools.programd.graph.TwoOptimalNodemaster]-->
    <entry key="programd.nodemapper-implementation">org.aitools.programd.graph.TwoOptimalNodemaster</entry>
    <!--<entry key="programd.nodemapper-implementation">org.aitools.programd.graph.NonOptimalNodemaster</entry>-->
    <!--<entry key="programd.nodemapper-implementation">org.aitools.programd.graph.OneOptimalNodemaster</entry>-->
    <!--<entry key="programd.nodemapper-implementation">org.aitools.programd.graph.ThreeOptimalNodemaster</entry>-->
    
    <!--The Multiplexor implementation to use. [String: org.aitools.programd.multiplexor.FlatFileMultiplexor]-->
    <entry key="programd.multiplexor-implementation">org.aitools.programd.multiplexor.FlatFileMultiplexor</entry>
    <!--<entry key="programd.multiplexor-classname">org.aitools.programd.multiplexor.DBMultiplexor</entry>-->
    
    <!--The directory in which to save flat-file predicates (FFM only). [URL: /var/programd/ffm]-->
    <entry key="programd.multiplexor.ffm-dir">/var/programd/ffm</entry>
    
    <!--Enable the heart? [boolean: false]
        * The heart can beat and let you know the bot is alive.
        * Right now the only kind of pulse is a message "I'm alive!" printed to the console.
        * You can write a "Pulse" that can do something more useful, like ping a server.-->
    <entry key="programd.heart.enabled">false</entry>
    
    <!--The pulse rate for the heart (beats per minute). [int: 5]-->
    <entry key="programd.heart.pulserate">5</entry>
    
    <!--The maximum size of the cache before writing to disk/database. [int: 500]-->
    <entry key="programd.predicate-cache.max">500</entry>
    
    <!-- Use interactive command-line shell? [boolean: true]-->
    <entry key="programd.console.use-shell">true</entry>
    
    <!-- Exit immediately upon startup? [boolean: false]
         * This is for purposes of timing the program; after all bots have
           been loaded, the program will immediately exit.-->
    <entry key="programd.exit-immediately-on-startup">false</entry>
    
    
    <!--
    SCHEMA LOCATIONS
    -->
    
    <!--The location of the AIML schema (or a copy of it). [URL: ../resources/schema/AIML.xsd]-->
    <entry key="programd.schema-location.AIML">../resources/schema/AIML.xsd</entry>

    <!--The location of the plugin schema (or a copy of it). [URL: ../resources/schema/plugins.xsd]-->
    <entry key="programd.schema-location.plugins">../resources/schema/plugins.xsd</entry>

    <!--The location of the test cases schema (or a copy of it). [URL: ../resources/schema/test-cases.xsd]-->
    <entry key="programd.schema-location.test-cases">../resources/schema/test-cases.xsd</entry>
    
            
    <!--
    INTERPRETER CONFIGURATION
    -->
    
    <!--The directory in which to execute <system> commands. [URL: ..]-->
    <entry key="programd.system-interpreter.directory">..</entry>
    
    <!--The string to prepend to all <system> calls (platform-specific). [String: ]
         * Windows requires something like "cmd /c "; Linux doesn't (just comment out)-->
    <entry key="programd.system-interpreter.prefix"></entry>
    
    <!--The JavaScript interpreter (fully-qualified class name). [String: org.aitools.programd.interpreter.RhinoInterpreter]-->
    <entry key="programd.javascript-interpreter.classname">org.aitools.programd.interpreter.RhinoInterpreter</entry>
    
    
    <!--
    AIMLWATCHER CONFIGURATION
    -->
    
    <!--Enable the AIML Watcher? [boolean: true]
        * This will automatically load your AIML files if they are changed.-->
    <entry key="programd.use-watcher">true</entry>
    
    <!--The delay period when checking changed AIML (milliseconds). [int: 2000]
        * Only applicable if the AIML Watcher is enabled.-->
    <entry key="programd.watcher.timer">2000</entry>
        
    
    <!--
    DATABASE CONFIGURATION
         * This is only meaningful if you are using a database-enabled Multiplexor
         * and/or the database-based chat logging.
    -->
    
    <!--Typical mySQL configuration-->
    
    <!--The URL of the database to use. [String: jdbc:mysql:///programdbot]-->
    <entry key="programd.database.url">jdbc:mysql:///programdbot</entry>
    
    <!--The database driver to use. [String: com.mysql.jdbc.Driver]-->
    <entry key="programd.database.driver">com.mysql.jdbc.Driver</entry>    
    
    <!--The maximum number of simultaneous connections to the database. [int: 25]-->
    <entry key="programd.database.connections">25</entry>
    
    <!--The username which with to access the database. [String: programd]-->
    <entry key="programd.database.user">programd</entry>
    
    <!--The password for the database. [String: yourpassword]-->
    <entry key="programd.database.password">yourpassword</entry>
    
    
    <!--
    OTHER CONFIGURATION FILE LOCATIONS
    -->
    
    <!--Configuration file for plugins. [URL: plugins.xml]-->
    <entry key="programd.conf-location.plugins">plugins.xml</entry>
    
</properties>