<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns="http://aitools.org/programd/4.6/bot-configuration"
    xmlns:d="http://aitools.org/programd/4.6"
    xmlns:sch="http://www.ascc.net/xml/schematron"
    targetNamespace="http://aitools.org/programd/4.6/bot-configuration"
    elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0" xml:lang="EN">
    <xs:annotation>
        <xs:documentation>This is the schema for bot configuration files for Program D.</xs:documentation>
        <xs:appinfo>
            <sch:title>Schematron validation</sch:title>
            <sch:ns prefix="bc" uri="http://aitools.org/programd/4.6/bot-configuration"/>
        </xs:appinfo>
    </xs:annotation>
    <xs:import namespace="http://aitools.org/programd/4.6" schemaLocation="http://aitools.org/programd/4.6/common-types.xsd"/>
    <xs:element name="bots">
        <xs:annotation>
            <xs:documentation>The bots element contains all configuration
            information.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
                <xs:element ref="bot" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="bot">
        <xs:annotation>
            <xs:documentation>A bot element describes how to configure a bot.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:bot">
                        <sch:assert
                            test="(@href and not(@id) and not(@enabled) and not(child::*)) or (not(@href) and @id and @enabled and child::*)"> A
                            bot element should have either (1) an href attribute, or the (2) id and enabled
                            attributes and element content, but not both.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="servlet-page" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>The page to use when talking to this bot via the servlet interface.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="properties"/>
                <xs:element ref="predicates"/>
                <xs:element ref="substitutions"/>
                <xs:element ref="sentence-splitters"/>
                <xs:element ref="listeners"/>
                <xs:element ref="testing"/>
                <xs:element name="learn" type="xs:anyURI">
                    <xs:annotation>
                        <xs:documentation>A learn element specifies an AIML file, or a
                            glob-style pattern indicating several AIML files, that
                            should be loaded by the bot. </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
            <xs:attribute name="id" type="xs:Name"/>
            <xs:attribute name="enabled" type="xs:boolean"/>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="properties">
        <xs:annotation>
            <xs:documentation>A properties element lists bot properties to be intitialized at
                startup.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:properties">
                        <sch:assert
                            test="(@href and not(bc:property)) or (not(@href) and bc:property)"> A
                            properties element should have an href attribute, or property element
                            content, but not both. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="property" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>A property has a name and a value.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="name" type="xs:Name"/>
                        <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="predicates">
        <xs:annotation>
            <xs:documentation>A properties element gives information about predicates that may be
                used in the AIML.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:predicates">
                        <sch:assert
                            test="(@href and not(bc:predicate)) or (not(@href) and bc:predicate)"> A
                            predicates element should have an href attribute, or predicate element
                            content, but not both. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="predicate" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>A predicate has a name, a default value, and a setting
                            indicating whether a set element should return the predicate's name or
                            its new value when setting it.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="name" type="xs:Name" use="required"/>
                        <xs:attribute name="default" type="xs:string" use="required"/>
                        <xs:attribute name="set-return" use="required">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="name"/>
                                    <xs:enumeration value="value"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="substitutions">
        <xs:annotation>
            <xs:documentation>A substitutions element lists different types of substitutions to be
                used.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:substitutions">
                        <sch:assert
                            test="(@href and not(bc:input or bc:gender or bc:person or bc:person2)) or (not(@href) and (bc:input or bc:gender or bc:person or bc:person2))"
                            > A substitutions element should have an href attribute, or a set of
                            substitution elements (input, gender, person or person2), but not both.
                        </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:all minOccurs="0">
                <xs:element ref="input"/>
                <xs:element ref="gender"/>
                <xs:element ref="person"/>
                <xs:element ref="person2"/>
            </xs:all>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="input" type="SubstitutionElementSet"/>
    <xs:element name="gender" type="SubstitutionElementSet"/>
    <xs:element name="person" type="SubstitutionElementSet"/>
    <xs:element name="person2" type="SubstitutionElementSet"/>
    <xs:complexType name="SubstitutionElementSet">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:predicates">
                        <sch:assert
                            test="(@href and not(bc:substitute)) or (not(@href) and bc:substitute)"> A
                            substitution element set should have an href attribute, or substitute
                            element content, but not both. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="substitute" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>A substitution has a find value, which should be a regular
                        expression, and a replace value which is what to substitute for matches of
                        the find value.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="find" type="xs:string" use="required"/>
                    <xs:attribute name="replace" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="href" type="xs:anyURI"/>
    </xs:complexType>
    <xs:element name="sentence-splitters">
        <xs:annotation>
            <xs:documentation>A sentence-splitters element lists markers that should be used to
                split sentences.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:predicates">
                        <sch:assert
                            test="(@href and not(bc:splitter)) or (not(@href) and bc:splitter)"> A
                            sentence-splitters element should have an href attribute, or splitter
                            element content, but not both. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="splitter" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>A splitter indicates a single value.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="value" type="xs:string" use="required"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="listeners">
        <xs:annotation>
            <xs:documentation>A listeners element lists listener configurations.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:listeners">
                        <sch:assert
                            test="(@href and not(bc:listener)) or (not(@href) and bc:listener)"> A
                            listeners element should have an href attribute, or listener element
                            content, but not both. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="listener" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>A listener element contains parameter values for a
                            listener.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="d:Parameter"/>
                        </xs:sequence>
                        <xs:attribute name="class" type="d:JavaClassname" use="required"/>
                        <xs:attribute name="enabled" type="xs:boolean" use="required"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="testing">
        <xs:annotation>
            <xs:documentation>A testing element defines the testing configuration.</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="href xor element content">
                    <sch:rule context="bc:testing">
                        <sch:assert
                            test="(@href and not(child::*)) or (not(@href) and child::*)"> A
                            testing element should have an href attribute, or testing element
                            content, but not both. </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="test-suite-path" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>A test-suite element gives the pathspec for one or more test suite files (use wildcards to indicate multiple files).</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="report-directory" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>A report-directory element gives the path to a directory where test reports should be stored.</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="href" type="xs:anyURI"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
